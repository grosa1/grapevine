name: Elixir CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "*"
jobs:
  grapevine:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
    - uses: actions/checkout@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: '22.2'
        elixir-version: '1.9.4'
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
    - name: Setup elixir and database
      working-directory: apps/grapevine
      run: |
        cp .github/test.exs config/test.extra.exs
        mix deps.get
        mix compile
        mix do ecto.create, ecto.migrate
      env:
        MIX_ENV: test
    - name: Verify application
      working-directory: apps/grapevine
      run: |
        mix format --check-formatted
        mix compile --force --warnings-as-errors
        mix credo
        mix test
      env:
        MIX_ENV: test
  grapevine-data:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
    - uses: actions/checkout@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: '22.2'
        elixir-version: '1.9.4'
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
    - name: Setup elixir and database
      working-directory: apps/data
      run: |
        cp .github/test.exs config/test.extra.exs
        mix deps.get
        mix compile
        mix do ecto.create, ecto.migrate
      env:
        MIX_ENV: test
    - name: Verify application
      working-directory: apps/data
      run: |
        mix compile --force --warnings-as-errors
        mix credo
        mix test
      env:
        MIX_ENV: test
  grapevine-socket:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
    - uses: actions/checkout@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: '22.2'
        elixir-version: '1.9.4'
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
    - name: Setup elixir and database
      working-directory: apps/socket
      run: |
        cp .github/test.exs config/test.extra.exs
        mix deps.get
        mix compile
        mix do ecto.create, ecto.migrate
      env:
        MIX_ENV: test
    - name: Verify application
      working-directory: apps/socket
      run: |
        mix format --check-formatted
        mix compile --force --warnings-as-errors
        mix credo
        mix test
      env:
        MIX_ENV: test
  grapevine-telnet:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
    - uses: actions/checkout@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: '22.2'
        elixir-version: '1.9.4'
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
    - name: Setup elixir
      working-directory: apps/telnet
      run: |
        mix deps.get
        mix compile
      env:
        MIX_ENV: test
    - name: Verify application
      working-directory: apps/telnet
      run: |
        mix format --check-formatted
        mix compile --force --warnings-as-errors
        mix credo
        mix test
      env:
        MIX_ENV: test
